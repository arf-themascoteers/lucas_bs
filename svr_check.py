import csv
from sklearn.neural_network import MLPRegressor
from sklearn.svm import SVR
import pandas as pd
from ds_manager import DSManager
import os
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
import numpy as np

lucas = DSManager("lucas", 1, "robust", train_size=0.75,split="normal")

selected_bands = {
    8:"678|887|1431|2025|2312|2777|3466|3603",
    16: "412|543|678|915|1186|1394|1807|2025|2136|2218|2631|2922|3467|3472|3669|3990",
    32: "358|400|500|572|596|688|695|981|1000|1214|1287|1438|1620|1723|1933|2139|2190|2419|2505|2507|2576|2653|2957|2964|3467|3469|3604|3604|3642|3643|3644|4184",
    64: "94|289|292|343|374|480|526|577|637|697|716|740|826|826|876|960|981|1043|1157|1165|1227|1335|1416|1525|1534|1598|1848|1874|1875|1937|2018|2032|2152|2153|2255|2259|2276|2392|2445|2652|2653|2655|2668|2781|2789|2981|2975|3042|3047|3128|3480|3489|3499|3505|3575|3581|3652|3675|3676|3952|3955|3979|4027|4158",
    128: "24|26|27|100|115|203|265|274|277|320|339|391|393|406|495|526|597|609|624|625|663|711|715|789|793|813|814|837|937|950|956|1017|1028|1044|1056|1142|1168|1240|1267|1329|1365|1368|1418|1428|1429|1485|1539|1575|1581|1605|1620|1742|1758|1760|1806|1812|1812|1849|1912|1995|1995|1999|2007|2065|2136|2143|2144|2184|2188|2253|2307|2323|2471|2473|2479|2528|2535|2539|2569|2589|2597|2635|2701|2702|2771|2780|2786|2850|2881|2957|2965|2972|2987|3079|3096|3128|3130|3159|3184|3185|3310|3383|3386|3387|3392|3397|3480|3480|3495|3540|3608|3607|3650|3655|3677|3768|3775|3793|3794|3843|3927|3958|3958|3961|3961|4004|4120|4162",
    256: "11|26|36|53|65|77|82|87|87|97|100|221|251|295|296|317|325|336|341|360|365|368|376|376|381|419|423|434|453|492|502|526|544|549|556|579|613|620|637|655|671|687|696|701|702|718|763|780|795|801|803|806|825|871|877|885|891|903|936|940|960|960|981|981|1006|1018|1022|1100|1110|1110|1112|1140|1171|1209|1222|1229|1238|1242|1269|1286|1307|1318|1324|1344|1347|1354|1422|1427|1440|1442|1452|1478|1480|1491|1563|1563|1566|1586|1591|1607|1618|1689|1701|1702|1703|1708|1720|1731|1735|1744|1783|1789|1789|1789|1793|1794|1897|1911|1917|1962|2000|2001|2006|2020|2025|2029|2106|2139|2143|2145|2145|2150|2152|2151|2152|2151|2244|2263|2272|2312|2324|2347|2348|2354|2358|2364|2367|2374|2375|2386|2402|2456|2530|2539|2549|2550|2550|2555|2564|2568|2579|2586|2651|2652|2656|2696|2700|2709|2712|2716|2716|2726|2836|2855|2904|2909|2922|2925|2922|2920|2923|2964|2980|2983|2985|3029|3060|3071|3077|3081|3118|3120|3126|3128|3137|3177|3180|3180|3219|3232|3251|3252|3271|3275|3292|3300|3476|3476|3477|3477|3472|3474|3476|3476|3482|3498|3503|3527|3530|3574|3580|3595|3593|3603|3644|3651|3651|3678|3686|3708|3712|3717|3726|3733|3732|3738|3740|3743|3747|3914|3919|3928|3930|3930|3930|3941|3947|3995|4013|4066|4118|4121|4128|4133|4144|4185",
    512: "32|34|40|48|51|56|69|84|94|98|104|111|122|128|129|130|142|146|152|168|174|195|206|218|222|241|253|259|264|268|281|284|300|302|307|311|317|324|338|340|352|353|358|362|369|372|380|393|400|402|413|475|477|482|486|487|493|494|496|497|508|512|515|525|539|546|558|563|570|571|597|602|607|616|641|647|649|654|656|659|674|680|687|692|714|732|741|748|752|760|773|774|777|778|780|795|800|810|812|826|830|833|841|850|856|862|867|887|893|894|921|925|931|936|944|961|965|976|983|989|997|1003|1011|1016|1028|1035|1048|1055|1065|1071|1075|1081|1086|1092|1107|1114|1123|1124|1192|1201|1203|1204|1211|1222|1227|1230|1285|1287|1302|1313|1316|1318|1321|1323|1331|1333|1340|1350|1362|1375|1378|1385|1420|1429|1436|1443|1444|1455|1471|1473|1481|1482|1488|1492|1494|1498|1526|1528|1538|1543|1545|1551|1556|1562|1568|1569|1578|1601|1604|1608|1632|1640|1641|1652|1685|1698|1709|1716|1721|1725|1726|1732|1738|1742|1743|1754|1772|1780|1782|1788|1790|1791|1794|1801|1802|1839|1876|1877|1878|1880|1881|1903|1919|1921|1943|1991|1993|2015|2019|2020|2024|2028|2029|2053|2054|2088|2089|2096|2098|2099|2112|2114|2134|2138|2139|2148|2155|2157|2173|2210|2221|2222|2223|2230|2236|2241|2247|2248|2250|2252|2256|2257|2260|2268|2379|2386|2387|2389|2392|2394|2396|2402|2403|2405|2412|2415|2416|2420|2422|2430|2433|2439|2461|2473|2481|2482|2488|2498|2502|2533|2537|2539|2569|2589|2592|2617|2620|2626|2627|2629|2630|2631|2634|2635|2636|2639|2657|2660|2664|2683|2684|2687|2690|2698|2701|2732|2744|2754|2766|2785|2804|2806|2810|2811|2812|2816|2821|2825|2854|2869|2882|2885|2919|2922|2923|2953|2970|2973|2974|2985|2986|2989|2994|2999|3002|3026|3040|3050|3053|3056|3060|3080|3092|3096|3110|3113|3122|3142|3156|3161|3166|3167|3191|3196|3221|3227|3234|3235|3247|3250|3257|3258|3268|3271|3272|3274|3279|3289|3293|3300|3307|3317|3332|3341|3343|3353|3357|3371|3389|3392|3398|3410|3415|3424|3427|3442|3449|3457|3461|3475|3489|3501|3508|3509|3518|3522|3526|3534|3549|3550|3554|3557|3562|3571|3572|3576|3588|3623|3635|3643|3655|3661|3664|3682|3687|3691|3699|3708|3713|3724|3727|3732|3734|3745|3750|3751|3758|3763|3771|3778|3790|3806|3861|3869|3871|3888|3900|3901|3912|3914|3920|3923|3927|3928|3932|3933|3937|3939|3944|3948|3951|3960|3961|3970|3979|3994|4012|4033|4048|4062|4070|4078|4080|4082|4097|4099|4115|4130|4177"
}


def get_mid_bands(size):
    x = np.linspace(0, 4199, size+2)
    x = x[1:-1]
    x = np.round(x)
    return x.astype(int)

def check_svr(dataset, bands):    
    for fold, (train_x, train_y, test_x, test_y) in enumerate(dataset.get_k_folds()):
        train_x = train_x[:,bands]
        test_x = test_x[:,bands]
        model = MLPRegressor(hidden_layer_sizes=(100,), max_iter=1000)
        model.fit(train_x, train_y)
        y_hat = model.predict(test_x)
        return calculate_metrics(dataset,test_y, y_hat)


def calculate_metrics(dataset,y_test, y_pred):
    r2, rmse, rpd, rpiq = calculate_4_metrics(y_test, y_pred)

    y_test_original = dataset.scaler_y.inverse_transform(y_test.reshape(-1, 1)).ravel()
    y_pred_original = dataset.scaler_y.inverse_transform(y_pred.reshape(-1, 1)).ravel()
    r2_o, rmse_o, rpd_o, rpiq_o = calculate_4_metrics(y_test_original, y_pred_original)

    return r2, rmse, rpd, rpiq, r2_o, rmse_o, rpd_o, rpiq_o

def calculate_4_metrics(y_test, y_pred):
    r2 = r2_score(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    std_dev = np.std(y_test, ddof=1)
    rpd = std_dev/rmse
    iqr = np.percentile(y_test, 75) - np.percentile(y_test, 25)
    rpiq = iqr/rmse

    return r2, rmse, rpd, rpiq

with open('cc_bands.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    header = [
        'fd_r2', 'fd_rmse', 'fd_rpd', 'fd_rpiq',
        'fd_r2_o', 'fd_rmse_o', 'fd_rpd_o', 'fd_rpiq_o',
        'ad_r2', 'ad_rmse', 'ad_rpd', 'ad_rpiq',
        'ad_r2_o', 'ad_rmse_o', 'ad_rpd_o', 'ad_rpiq_o'
    ]
    writer.writerow(header)
    for key, value in selected_bands.items():
        fd_bands = get_mid_bands(key)
        ad_bands = [int(i) for i in value.split("|")]
        r2, rmse, rpd, rpiq, r2_o, rmse_o, rpd_o, rpiq_o = check_svr(lucas, fd_bands)
        fd_metrics = [r2, rmse, rpd, rpiq, r2_o, rmse_o, rpd_o, rpiq_o]
        r2, rmse, rpd, rpiq, r2_o, rmse_o, rpd_o, rpiq_o = check_svr(lucas, ad_bands)
        ad_metrics = [r2, rmse, rpd, rpiq, r2_o, rmse_o, rpd_o, rpiq_o]
        writer.writerow(fd_metrics + ad_metrics)
        f.flush()
        print([round(float(i),3) for i in fd_metrics])
        print([round(float(i),3) for i in ad_metrics])
